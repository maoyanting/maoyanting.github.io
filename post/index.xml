<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 修仙下属委员会</title>
    <link>https://maoyanting.github.io/post/</link>
    <description>Recent content in Posts on 修仙下属委员会</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 02 Mar 2020 17:14:39 +0800</lastBuildDate>
    
	<atom:link href="https://maoyanting.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>记一次OOM排查</title>
      <link>https://maoyanting.github.io/post/oom/</link>
      <pubDate>Mon, 02 Mar 2020 17:14:39 +0800</pubDate>
      
      <guid>https://maoyanting.github.io/post/oom/</guid>
      <description>&lt;p&gt;项目测试环境正常，预发OOM，这究竟是道德的沦丧还是……&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Swagger</title>
      <link>https://maoyanting.github.io/post/swagger/</link>
      <pubDate>Wed, 21 Aug 2019 17:43:35 +0800</pubDate>
      
      <guid>https://maoyanting.github.io/post/swagger/</guid>
      <description>&lt;p&gt;Swagger的简单使用&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>homebrew下载缓慢问题</title>
      <link>https://maoyanting.github.io/post/homebrew%E4%B8%8B%E8%BD%BD%E7%BC%93%E6%85%A2%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 20 Aug 2019 23:56:20 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/homebrew%E4%B8%8B%E8%BD%BD%E7%BC%93%E6%85%A2%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;homebrew下载缓慢问题&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>记一次jar包冲突导致的NoSuchMethodError</title>
      <link>https://maoyanting.github.io/post/%E8%AE%B0%E4%B8%80%E6%AC%A1jar%E5%8C%85%E5%86%B2%E7%AA%81%E5%AF%BC%E8%87%B4%E7%9A%84nosuchmethoderror/</link>
      <pubDate>Wed, 10 Apr 2019 08:40:46 +0800</pubDate>
      
      <guid>https://maoyanting.github.io/post/%E8%AE%B0%E4%B8%80%E6%AC%A1jar%E5%8C%85%E5%86%B2%E7%AA%81%E5%AF%BC%E8%87%B4%E7%9A%84nosuchmethoderror/</guid>
      <description>&lt;p&gt;记一次jar包冲突导致的 &lt;code&gt;NoSuchMethodError&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LittleTips-一些小技巧集合</title>
      <link>https://maoyanting.github.io/post/littletips/</link>
      <pubDate>Mon, 25 Mar 2019 22:07:05 +0800</pubDate>
      
      <guid>https://maoyanting.github.io/post/littletips/</guid>
      <description>&lt;p&gt;一些很小的技巧合集&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从Hexo到Hugo</title>
      <link>https://maoyanting.github.io/post/%E4%BB%8Ehexo%E5%88%B0hugo/</link>
      <pubDate>Tue, 05 Mar 2019 21:12:57 +0800</pubDate>
      
      <guid>https://maoyanting.github.io/post/%E4%BB%8Ehexo%E5%88%B0hugo/</guid>
      <description>&lt;p&gt;从Hexo成功迁移到Hugo了呢&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring Boot(未完)</title>
      <link>https://maoyanting.github.io/post/springboot/</link>
      <pubDate>Mon, 25 Feb 2019 22:12:50 +0800</pubDate>
      
      <guid>https://maoyanting.github.io/post/springboot/</guid>
      <description>&lt;p&gt;这年头新项目不用 &lt;code&gt;Spring Boot&lt;/code&gt; 的大概想法比较异于常人😅&lt;/p&gt;

&lt;p&gt;代码基于 &lt;code&gt;Spring Boot 2.0&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring-sleuth</title>
      <link>https://maoyanting.github.io/post/spring-sleuth/</link>
      <pubDate>Mon, 22 Oct 2018 22:49:08 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/spring-sleuth/</guid>
      <description>&lt;p&gt;有时候，定位bug真的是个很麻烦的事情呢&lt;/p&gt;

&lt;p&gt;我们可以简单借用一下Spring Cloud Sleuth&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring-全局异常拦截</title>
      <link>https://maoyanting.github.io/post/spring-%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E6%8B%A6%E6%88%AA/</link>
      <pubDate>Tue, 16 Oct 2018 15:49:06 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/spring-%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E6%8B%A6%E6%88%AA/</guid>
      <description>&lt;p&gt;Spring MVC那一篇里提到了异常拦截来做参数校验返回，那里是对特定的 &lt;code&gt;controller&lt;/code&gt; 做异常捕捉，但是我们也可以选择全局拦截处理&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java-Java基础</title>
      <link>https://maoyanting.github.io/post/java-java%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 08 Oct 2018 21:47:46 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/java-java%E5%9F%BA%E7%A1%80/</guid>
      <description>&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;

&lt;p&gt;本文是对一些java基础知识的整理，把之前印象笔记里面的全部慢慢搬到这个blog来&lt;/p&gt;

&lt;p&gt;为了方便就按照《thinking in Java》的目录来编辑。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这里面的内容均为面试题相关，可能的考点等&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这本书里面有些翻译不是很好，建议和英文版对照。&lt;/p&gt;

&lt;p&gt;提醒：文章较长，因为很早写的，罗列的知识点较多，在慢慢把知识点摘取出去以链接形式存在。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cookie</title>
      <link>https://maoyanting.github.io/post/cookie/</link>
      <pubDate>Tue, 18 Sep 2018 22:30:50 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/cookie/</guid>
      <description>&lt;p&gt;今天被我们的前端同学气的半死，但是他问我为什么没有cookie的时候我是没有看见cookie……&lt;/p&gt;

&lt;p&gt;恶补一下cookie的知识，为了下次能不要再懵逼&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring（未完）</title>
      <link>https://maoyanting.github.io/post/spring/</link>
      <pubDate>Mon, 17 Sep 2018 11:56:06 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/spring/</guid>
      <description>&lt;p&gt;spring 是一个 &lt;strong&gt;轻量级&lt;/strong&gt;的 实现&lt;strong&gt;IOC&lt;/strong&gt; 和 &lt;strong&gt;AOP&lt;/strong&gt;的框架。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring MVC 参数验证</title>
      <link>https://maoyanting.github.io/post/spring-mvc-%E5%8F%82%E6%95%B0%E9%AA%8C%E8%AF%81/</link>
      <pubDate>Mon, 10 Sep 2018 23:46:11 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/spring-mvc-%E5%8F%82%E6%95%B0%E9%AA%8C%E8%AF%81/</guid>
      <description>&lt;p&gt;参数校验也可以很简单啊&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IDEA-小技巧</title>
      <link>https://maoyanting.github.io/post/idea-%E5%B0%8F%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Mon, 10 Sep 2018 23:31:05 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/idea-%E5%B0%8F%E6%8A%80%E5%B7%A7/</guid>
      <description>&lt;p&gt;我们的目标是，准时下班！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mybatis-小问题</title>
      <link>https://maoyanting.github.io/post/mybatis-%E5%B0%8F%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 10 Sep 2018 23:03:31 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/mybatis-%E5%B0%8F%E9%97%AE%E9%A2%98/</guid>
      <description>一、Parameter &amp;lsquo;id&amp;rsquo; not found. Available parameters are [arg2, arg1, arg0, param3, param1, param2] 原因：多入参的情况下没有在参数前加@Param
特殊原因：加了@Param还是报错，查看你是import的依赖是不是org.apache.ibatis.annotations.Param
可能会不小心导入org.springframework.data.repository.query.Param</description>
    </item>
    
    <item>
      <title>Docker基础</title>
      <link>https://maoyanting.github.io/post/docker/</link>
      <pubDate>Thu, 06 Sep 2018 22:37:38 +0800</pubDate>
      
      <guid>https://maoyanting.github.io/post/docker/</guid>
      <description>&lt;p&gt;Docker是个好东西&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL-索引</title>
      <link>https://maoyanting.github.io/post/mysql-%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Wed, 30 May 2018 21:24:41 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/mysql-%E7%B4%A2%E5%BC%95/</guid>
      <description>&lt;h3 id=&#34;什么是索引&#34;&gt;什么是索引&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;索引用于快速找出在某个列中有一特定值的行&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java-HttpClient</title>
      <link>https://maoyanting.github.io/post/java-httpclient%E7%9A%84%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Tue, 15 May 2018 23:30:39 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/java-httpclient%E7%9A%84%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;h2 id=&#34;httpclient的介绍&#34;&gt;HttpClient的介绍&lt;/h2&gt;

&lt;h3 id=&#34;一般步骤&#34;&gt;一般步骤&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;取得HttpClient对象&lt;/li&gt;
&lt;li&gt;封装http请求&lt;/li&gt;
&lt;li&gt;执行http请求&lt;/li&gt;
&lt;li&gt;处理结果&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;请求类型&#34;&gt;请求类型&lt;/h3&gt;

&lt;p&gt;GET, HEAD, POST, PUT, DELETE, TRACE 和 OPTIONS&lt;/p&gt;

&lt;h3 id=&#34;官方示例&#34;&gt;官方示例&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//1.获得一个httpclient对象
CloseableHttpClient httpclient = HttpClients.createDefault();
//2.生成一个get请求
HttpGet httpget = new HttpGet(&amp;quot;http://localhost/&amp;quot;);
//3.执行get请求并返回结果
CloseableHttpResponse response = httpclient.execute(httpget);
try {
//4.处理结果
} finally {
//5.关闭response
    response.close();
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>工作流</title>
      <link>https://maoyanting.github.io/post/%E5%B7%A5%E4%BD%9C%E6%B5%81/</link>
      <pubDate>Thu, 10 May 2018 21:52:05 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/%E5%B7%A5%E4%BD%9C%E6%B5%81/</guid>
      <description>&lt;h2 id=&#34;零-工作流相关概念&#34;&gt;零、工作流相关概念&lt;/h2&gt;

&lt;h3 id=&#34;1-工作流-workflow&#34;&gt;1、工作流（Workflow）&lt;/h3&gt;

&lt;p&gt;工作流是对工作流程及其各操作步骤之间业务规则的抽象、概括、描述。&lt;/p&gt;

&lt;p&gt;工作流建模，即将工作流程中的工作如何前后组织在一起的逻辑和规则在计算机中以恰当的模型进行表示并对其实施计算。工作流要解决的主要问题是：&lt;strong&gt;为实现某个业务目标，在多个*参与者*之间，利用计算机，按某种预定规则*自动传递*文档、信息或者任务。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;工作流管理系统（Workflow Management System, WfMS）&lt;/strong&gt;的主要功能是通过计算机技术的支持去定义、执行和管理工作流，协调工作流执行过程中工作之间以及群体成员之间的信息交互。工作流需要依靠工作流管理系统来实现。工作流属于计算机支持的协同工作（Computer Supported Cooperative Work，CSCW）的一部分。后者是普遍地研究一个群体如何在计算机的帮助下实现协同工作的。&lt;/p&gt;

&lt;p&gt;​                                                                                                                                                      ————来自维基百科。&lt;/p&gt;

&lt;p&gt;工作流最大的好处是 &lt;strong&gt;系统自动流转&lt;/strong&gt;。拿上面的文档管理系统来说系统可以自动按照设定的步骤流转，如果系统可以处理的，自动处理掉，如果系统不可以处理那用某种方式通知需要处理的人，让人介入，而不需要人主动去关注现在应该做哪个步骤。&lt;/p&gt;

&lt;h3 id=&#34;2-bpmn-business-process-model-and-notation&#34;&gt;2、BPMN(Business Process Model and Notation)&lt;/h3&gt;

&lt;p&gt;业务流程模型注解（Business Process Modeling Notation - BPMN）是 业务流程模型的一种标准图形注解。这个标准 是由对象管理组（Object Management Group - OMG）维护的。&lt;/p&gt;

&lt;p&gt;基本上，BPMN规范&lt;strong&gt;定义了任务看起来怎样的，哪些结构可以 与其他进行连接，等等。&lt;/strong&gt;这就意味着意思不会被误解。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;推荐阅读：&lt;a href=&#34;http://www.mossle.com/docs/jbpm4devguide/html/bpmn2.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;BPMN 2.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mossle.com/docs/activiti/index.html#bpmn20&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Activiti用户手册-BPMN2.0&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Tomcat-日志</title>
      <link>https://maoyanting.github.io/post/tomcat-%E6%97%A5%E5%BF%97/</link>
      <pubDate>Wed, 28 Mar 2018 15:49:06 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/tomcat-%E6%97%A5%E5%BF%97/</guid>
      <description>&lt;p&gt;昨天装了SSH，连接到了linux的远程服务器，然后和我说可以查看Tomcat的日志&lt;/p&gt;

&lt;p&gt;我：喵喵？&lt;/p&gt;

&lt;p&gt;好吧我承认我没怎么搞懂日志这个东西&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>新手村-Java新人拿到一台新的电脑需要装配什么</title>
      <link>https://maoyanting.github.io/post/%E6%96%B0%E6%89%8B%E6%9D%91-java%E6%96%B0%E4%BA%BA%E6%8B%BF%E5%88%B0%E4%B8%80%E5%8F%B0%E6%96%B0%E7%9A%84%E7%94%B5%E8%84%91%E9%9C%80%E8%A6%81%E8%A3%85%E9%85%8D%E4%BB%80%E4%B9%88/</link>
      <pubDate>Mon, 26 Mar 2018 23:56:20 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/%E6%96%B0%E6%89%8B%E6%9D%91-java%E6%96%B0%E4%BA%BA%E6%8B%BF%E5%88%B0%E4%B8%80%E5%8F%B0%E6%96%B0%E7%9A%84%E7%94%B5%E8%84%91%E9%9C%80%E8%A6%81%E8%A3%85%E9%85%8D%E4%BB%80%E4%B9%88/</guid>
      <description>&lt;p&gt;适用对象：新手&lt;/p&gt;

&lt;p&gt;装备：win10&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Git-基本操作</title>
      <link>https://maoyanting.github.io/post/git-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 19 Mar 2018 23:14:11 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/git-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</guid>
      <description>&lt;p&gt;继装Git就遇到很大的问题后，我发现我对Git并不是很了解……因为之前都是直接用sourcetree的&lt;/p&gt;

&lt;p&gt;整理学习一下吧&lt;/p&gt;

&lt;p&gt;当然，新手其实最需要的就是三个技能：clone，merge，push&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Git-win10下Git闪退</title>
      <link>https://maoyanting.github.io/post/git-win10%E4%B8%8Bgit%E9%97%AA%E9%80%80/</link>
      <pubDate>Mon, 19 Mar 2018 20:09:16 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/git-win10%E4%B8%8Bgit%E9%97%AA%E9%80%80/</guid>
      <description>&lt;p&gt;win10下Git闪退&lt;/p&gt;

&lt;p&gt;今天第一天上班，装Git就遇到了很大的问题……忧伤&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux-常用命令大全</title>
      <link>https://maoyanting.github.io/post/linux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</link>
      <pubDate>Sun, 04 Mar 2018 15:54:56 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/linux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</guid>
      <description>&lt;p&gt;Linux命令大全&lt;/p&gt;

&lt;p&gt;原文链接：&lt;a href=&#34;http://blog.csdn.net/Evankaka/article/details/49227669&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Linux命令大全&amp;mdash;-常用文件操作命令&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java-通用代码</title>
      <link>https://maoyanting.github.io/post/java-%E9%80%9A%E7%94%A8%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Fri, 02 Mar 2018 17:27:43 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/java-%E9%80%9A%E7%94%A8%E4%BB%A3%E7%A0%81/</guid>
      <description>&lt;p&gt;一些通用的Java代码：从网上下载图片，&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java-I/O</title>
      <link>https://maoyanting.github.io/post/java-i_o/</link>
      <pubDate>Fri, 02 Mar 2018 15:29:20 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/java-i_o/</guid>
      <description>&lt;p&gt;I/O资料整理&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>杭州二手房</title>
      <link>https://maoyanting.github.io/post/%E5%B0%8F%E9%BB%91%E5%B1%8B-%E6%9D%AD%E5%B7%9E%E4%BA%8C%E6%89%8B%E6%88%BF/</link>
      <pubDate>Tue, 27 Feb 2018 15:43:51 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/%E5%B0%8F%E9%BB%91%E5%B1%8B-%E6%9D%AD%E5%B7%9E%E4%BA%8C%E6%89%8B%E6%88%BF/</guid>
      <description>零、写在前面 家里有在杭州买房的需求，自己还在忙着找工作，只能说结合着来了XD。
这几天恰好围观了下GitHub上的这个repository
star数蹭蹭蹭往上涨啊
其实作者的数据真的是相当得全了
但是作为一个强迫症，幻想着如果能在一张图内显示所有自己需要的数据就好了啊
一、数据 需要的数据 杭州二手房看房、询价、谈判、过户技巧
这篇看下来受益良多，大致也能分析出我们在去找中介之前，
自己的需求：
 预算
 交通
 户型和大小
 楼层
 学区
 朝向
  etc&amp;hellip;
网上所需要收集的数据：
 小区位置 小区单价：其实这里还需少户型，但是这个数据批量不好找 小区年代：老房子会有很多问题，新房子肯定贵 地铁位置 主干道交通 周边学校、商场、医院、菜场、超市等  收集数据 小区的数据： 一个爬虫解决，链家的数据还是比较靠谱的。
地铁的数据： 杭州运行的地铁（截止2018.2.27）只有三条，在建2条，其余的均为规划。
参考：杭州市轨道交通三期线路及沿线用地控制规划（草案）
人力把能找到的地铁经纬度全部找了出来，部分连周边道路都是规划中的除外（萧山有部分地铁站真的是荒郊野岭）
用了最简单也是最强大的excel，然后把数据导出为csv，再导入MySQL。
其余数据： 准备使用地图的api，所以不用收集。
处理数据 计算出每个地铁站和小区之间的距离，每个小区取最小值，为其最近地铁站。
UPDATE lianjia_xiaoqu AS r, ( SELECT a.housecode, a.distance, b.metro, b.metro_line FROM ( SELECT housecode, min( distance ) AS distance FROM xiaoqu_metro_distance GROUP BY housecode ) AS a, xiaoqu_metro_distance AS b WHERE a.</description>
    </item>
    
    <item>
      <title>翻译-Building a RESTful Web Service</title>
      <link>https://maoyanting.github.io/post/%E7%BF%BB%E8%AF%91-building-a-restful-web-service/</link>
      <pubDate>Wed, 14 Feb 2018 21:00:27 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/%E7%BF%BB%E8%AF%91-building-a-restful-web-service/</guid>
      <description>&lt;p&gt;翻译——使用Spring创建一个RESTful Web Service&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JavaWeb-Mybatis</title>
      <link>https://maoyanting.github.io/post/javaweb-mybatis/</link>
      <pubDate>Fri, 09 Feb 2018 14:11:13 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/javaweb-mybatis/</guid>
      <description>&lt;p&gt;spring-mybatis与原生mybatis使用对比、使用mybatis-generator&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JavaWeb-Maven</title>
      <link>https://maoyanting.github.io/post/javaweb-maven/</link>
      <pubDate>Thu, 08 Feb 2018 20:09:53 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/javaweb-maven/</guid>
      <description>&lt;p&gt;依赖寻找和设置，POM，SSM必要依赖等&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JavaWeb-Tomcat</title>
      <link>https://maoyanting.github.io/post/javaweb-tomcat/</link>
      <pubDate>Thu, 08 Feb 2018 19:37:20 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/javaweb-tomcat/</guid>
      <description>&lt;p&gt;基础&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java-Base64</title>
      <link>https://maoyanting.github.io/post/java-base64/</link>
      <pubDate>Wed, 07 Feb 2018 13:09:29 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/java-base64/</guid>
      <description>&lt;p&gt;某钱包分享链接泄漏手机号码了，&lt;a href=&#34;https://www.v2ex.com/t/429099#reply48&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;链接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;安全问题很重要啊&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>hexo-NexT的优化</title>
      <link>https://maoyanting.github.io/post/hexo-next%E7%9A%84%E4%BC%98%E5%8C%96/</link>
      <pubDate>Wed, 07 Feb 2018 10:59:24 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/hexo-next%E7%9A%84%E4%BC%98%E5%8C%96/</guid>
      <description>&lt;p&gt;一些基于NexT的优化&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>小黑屋-Java-JavaSE组件</title>
      <link>https://maoyanting.github.io/post/java-javase%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Wed, 07 Feb 2018 10:05:21 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/java-javase%E7%BB%84%E4%BB%B6/</guid>
      <description>Java Language Tools &amp;amp; Tool APIs    名称 功能     javac 把.java文件编译为.class文件（每个类一个.class文件）   javadoc 生成Java说明文档，api文档   jar 软件包文件格式，归档文件   javap JDK自带的反汇编器，可以查看java编译器为我们生成的字节码。   JPDA(Java Platform Debugger Architecture) Java平台调试器架构   JConsole 内置 Java 性能分析器?   Java VisualVM 集成了多个JDK 命令行工具的可视化工具   Java DB 开放源码数据库管理系统   Security    Int&amp;rsquo;l    RMI    IDL    Deploy    Monitoring    Troubleshoot    Scripting    JVM TI Java 虚拟机所提供的 native 编程接口   Web Services    java java.</description>
    </item>
    
    <item>
      <title>MySQL-开发</title>
      <link>https://maoyanting.github.io/post/mysql-%E5%BC%80%E5%8F%91/</link>
      <pubDate>Tue, 06 Feb 2018 16:02:53 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/mysql-%E5%BC%80%E5%8F%91/</guid>
      <description>&lt;p&gt;本文整理自《深入浅出MySQL数据库开发、优化与管理维护（第2版）》&lt;/p&gt;

&lt;p&gt;第二部分 开发篇&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>爬虫-pyspider</title>
      <link>https://maoyanting.github.io/post/%E7%88%AC%E8%99%AB-pyspider/</link>
      <pubDate>Mon, 05 Feb 2018 16:19:14 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/%E7%88%AC%E8%99%AB-pyspider/</guid>
      <description>&lt;p&gt;爬虫&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java-HashMap</title>
      <link>https://maoyanting.github.io/post/java-hashmap/</link>
      <pubDate>Mon, 29 Jan 2018 13:55:25 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/java-hashmap/</guid>
      <description>&lt;h2 id=&#34;摘要-未完&#34;&gt;摘要（未完）&lt;/h2&gt;

&lt;p&gt;查看了一下HashMap源代码，一些基本知识点&lt;/p&gt;

&lt;p&gt;参考资料里面其实写的很好，建议看参考链接&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>数据结构和算法分析-数据结构</title>
      <link>https://maoyanting.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Fri, 26 Jan 2018 23:20:22 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;

&lt;p&gt;表、栈、队列、树、Hash等数据结构&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JavaWeb面试-设计模式</title>
      <link>https://maoyanting.github.io/post/javaweb%E9%9D%A2%E8%AF%95-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 26 Jan 2018 15:12:19 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/javaweb%E9%9D%A2%E8%AF%95-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;设计模式简单整理&lt;/p&gt;

&lt;p&gt;设计模式是种思路，概念什么的只是为了应付面试。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java-深入理解JVM虚拟机学习笔记</title>
      <link>https://maoyanting.github.io/post/java-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3jvm%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 16 Jan 2018 18:03:50 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/java-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3jvm%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;

&lt;p&gt;《深入理解JVM虚拟机》学习笔记&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JavaWeb面试-概览</title>
      <link>https://maoyanting.github.io/post/javaweb%E9%9D%A2%E8%AF%95-%E6%A6%82%E8%A7%88/</link>
      <pubDate>Tue, 16 Jan 2018 18:03:50 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/javaweb%E9%9D%A2%E8%AF%95-%E6%A6%82%E8%A7%88/</guid>
      <description>&lt;p&gt;Java Web 面试知识点大致整理&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>数据结构和算法分析-排序总结（含图解）</title>
      <link>https://maoyanting.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-%E6%8E%92%E5%BA%8F%E6%80%BB%E7%BB%93%E5%90%AB%E5%9B%BE%E8%A7%A3/</link>
      <pubDate>Tue, 16 Jan 2018 18:02:50 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-%E6%8E%92%E5%BA%8F%E6%80%BB%E7%BB%93%E5%90%AB%E5%9B%BE%E8%A7%A3/</guid>
      <description>&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/maoyanting/readme_pic/blob/master/blog_sorting.png?raw=true&#34; alt=&#34;ddd&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring-注释</title>
      <link>https://maoyanting.github.io/post/spring-%E6%B3%A8%E9%87%8A/</link>
      <pubDate>Thu, 11 Jan 2018 15:49:06 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/spring-%E6%B3%A8%E9%87%8A/</guid>
      <description>注释 @Component： 功能：表明该类会作为组件类，并告知Spring要为此创建bean
下述这 3 个注释和 @Component 是等效的，但是从注释类的命名上，很容易看出这 3 个注释分别和持久层、业务层和控制层（Web 层）相对应。
@Service 用于标注业务层组件
@Controller 用于标注控制层组件
@Repository 用于标注数据访问组件，即DAO组件
@Component 泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。
@ComponentScan： 功能：在Spring中启用组件扫描（默认组件扫描不启动），默认扫描与配置类相同的包；
@ComponentScan（”packageName&amp;rdquo;）
指明是基础包：@ComponentScan（basePackages=”package1Name”）@ComponentScan（basePackages={”package1Name”,”package2Name”}）
另一种方式：@ComponentScan（basePackagesClasses={ package1Name.class , package2Name.class } ）
@Autowired: 功能：声明要进行自动装配
使用：在构造器和方法 上
默认按类型装配，默认情况下必须要求依赖对象必须存在，如果要允许null值，可以设置它的required属性为false，如：@Autowired(required=false) ，如果我们想使用名称装配可以结合@Qualifier注解进行使用。
加上@Autowired后不需要getter()和setter()方法，Spring也会自动注入。
@Qualifier 功能：按名字装配bean
当我们在 Spring 容器中配置了两个类型为 Office 类型的 Bean，当对 Boss 的 office 成员变量进行自动注入时，Spring 容器将无法确定到底要用哪一个 Bean，就会发生异常。
Spring 允许我们通过 @Qualifier 注释指定注入 Bean 的名称，这样歧义就消除了，所以 @Autowired 和 @Qualifier 结合使用时，自动注入的策略就从 byType 转变成 byName 了。
@Resource 功能：按名字装配bean
是JDK1.6支持的注解（非Spring），默认按照名称进行装配。
名称可以通过name属性进行指定，如果没有指定name属性，当注解写在字段上时，默认取字段名，按照名称查找，如果注解写在setter方法上默认取属性名进行装配。当找不到与名称匹配的bean时才按照类型进行装配。但是需要注意的是，如果name属性一旦指定，就只会按照名称进行装配。
@Configuration： 表明此类是个配置类</description>
    </item>
    
    <item>
      <title>MySQL-基本操作</title>
      <link>https://maoyanting.github.io/post/mysql-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Wed, 10 Jan 2018 21:48:43 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/mysql-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</guid>
      <description>&lt;p&gt;本文整理自《深入浅出MySQL数据库开发、优化与管理维护（第2版）》&lt;/p&gt;

&lt;p&gt;第一部分 基础篇&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>KafKa-在Spring中的使用</title>
      <link>https://maoyanting.github.io/post/kafka-%E5%9C%A8spring%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 10 Jan 2018 09:26:50 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/kafka-%E5%9C%A8spring%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;h2 id=&#34;写在前面&#34;&gt;写在前面&lt;/h2&gt;

&lt;p&gt;Kafka的简单介绍可以看&lt;a href=&#34;http://www.infoq.com/cn/articles/depth-interpretation-of-kafka-data-reliability&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;这个博客&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kafka的简单使用可参看之前的&lt;a href=&#34;https://maoyanting.github.io/2018/01/08/kafka%E5%AE%89%E8%A3%85%EF%BC%88%E7%BF%BB%E8%AF%91%EF%BC%89/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;KafKa安装（翻译）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Spring for Kafka 的简单使用可参看&lt;a href=&#34;https://my.oschina.net/zhengweishan/blog/736213&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;这个博客&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这里放一张我自己弄的简单的图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/maoyanting/readme_pic/blob/master/kafka%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.png?raw=true&#34; alt=&#34;kafka基础知识&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>翻译-Spring for Apache Kafka</title>
      <link>https://maoyanting.github.io/post/%E7%BF%BB%E8%AF%91-spring-for-apache-kafka/</link>
      <pubDate>Mon, 08 Jan 2018 12:27:46 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/%E7%BF%BB%E8%AF%91-spring-for-apache-kafka/</guid>
      <description>&lt;p&gt;翻译——Spring for Apache Kafka官方文档&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kafka-基本使用</title>
      <link>https://maoyanting.github.io/post/kafka-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 08 Jan 2018 11:27:46 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/kafka-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;

&lt;p&gt;Kafka最简单的使用&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JavaWeb-WebSocket在Spring&#43;React的实现</title>
      <link>https://maoyanting.github.io/post/javaweb-websocket%E5%9C%A8spring&#43;react%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 05 Jan 2018 11:27:46 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/javaweb-websocket%E5%9C%A8spring&#43;react%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>背景 先说一下别的轮询方式： ajax轮询：让浏览器隔个几秒就发送一次请求，询问服务器是否有新信息。 long poll：浏览器发起连接后，如果没消息，就一直不返回Response给浏览器。直到有消息才返回，返回完之后，浏览器再次建立连接，周而复始。
ajax轮询 需要服务器有很快的处理速度和资源。 long poll 需要有很高的并发。
再说webSocket，先必须记住，webSocket是一个协议 我们使用的应该说是webSocket API
WebSocket是基于TCP的独立的协议。 和HTTP的唯一关联就是HTTP服务器需要发送一个“Upgrade”请求，即101 Switching Protocol到HTTP服务器，然后由服务器进行协议转换
//简单来说，就是我是从TCP那边继承过来的，干活需要依靠HTTP先帮我连接上
前端部分： 最简单的实现：
const ws = new WebSocket(&amp;quot;ws://echo.websocket.org/ws&amp;quot;); ws.onopen = function(evt) { console.log(&amp;quot;Connection open ...&amp;quot;); ws.send(&amp;quot;Hello WebSockets!&amp;quot;); }; ws.onmessage = function(evt) { console.log( &amp;quot;Received Message: &amp;quot; + evt.data); ws.close(); }; ws.onclose = function(evt) { console.log(&amp;quot;Connection closed.&amp;quot;); };  后端部分 先放官方文档(我用的是spring 4.3.13.RELEASE)
其实基本上就4四个部分： 1. 添加依赖 2. Handler类 3. 拦截器 4. 配置
添加依赖  &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title>Kafka-内部分析</title>
      <link>https://maoyanting.github.io/post/kafka-%E5%86%85%E9%83%A8%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 05 Jan 2018 11:27:46 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/kafka-%E5%86%85%E9%83%A8%E5%88%86%E6%9E%90/</guid>
      <description>简介 设计目标 1、以时间复杂度为O(1)的方式提供消息持久化能力，即使对TB级以上数据也能保证常数时间复杂度的访问性能。
2、高吞吐率。即使在非常廉价的商用机器上也能做到单机支持每秒100K条以上消息的传输。
3、支持Kafka Server间的消息分区，及分布式消费，同时保证每个Partition内的消息顺序传输。
4、同时支持离线数据处理和实时数据处理。
5、Scale out：支持在线水平扩展。
结构 Kafka通过Zookeeper管理集群配置，选举leader
在Consumer Group发生变化时进行rebalance。
Producer使用push模式将消息发布到broker，
Consumer使用pull模式从broker订阅并消费消息。
Topic &amp;amp; Partition Topic在逻辑上可以被认为是一个queue，每条消费都必须指定它的Topic，可以简单理解为必须指明把这条消息放进哪个queue里。为了使得Kafka的吞吐率可以线性提高，物理上把Topic分成一个或多个Partition，每个Partition在物理上对应一个文件夹，该文件夹下存储这个Partition的所有消息和索引文件。
🔔若创建topic1和topic2两个topic，且分别有13个和19个分区，则整个集群上会相应会生成共32个文件夹（本文所用集群共8个节点，此处topic1和topic2 replication-factor均为1）。
每个日志文件都是一个log entrie序列
每个log entry包含一个4字节整型数值（值为N+5），1个字节的&amp;rdquo;magic value&amp;rdquo;，4个字节的CRC校验码，其后跟N个字节的消息体。
每条消息都有一个当前Partition下唯一的64字节的offset，它指明了这条消息的起始位置。磁盘上存储的消息格式如下：
message length ： 4 bytes (value: 1+4+n) &amp;quot;magic&amp;quot; value ： 1 byte crc ： 4 bytes payload ： n bytes  这个log entries并非由一个文件构成，而是分成多个segment，每个segment以该segment第一条消息的offset命名并以“.kafka”为后缀。
另外会有一个索引文件，它标明了每个segment下包含的log entry的offset范围，如下图所示。
效率： 因为每条消息都被append到该Partition中，属于顺序写磁盘，因此效率非常高（经验证，顺序写磁盘效率比随机写内存还要高，这是Kafka高吞吐率的一个很重要的保证）。
因为Kafka读取特定消息的时间复杂度为O(1)，即与文件大小无关，删除过期文件与提高Kafka性能无关。选择怎样的删除策略只与磁盘以及具体的需求有关。
另外，Kafka会为每一个Consumer Group保留一些metadata信息——当前消费的消息的position，也即offset。这个offset由Consumer控制。正常情况下Consumer会在消费完一条消息后递增该offset。当然，Consumer也可将offset设成一个较小的值，重新消费一些消息。因为offet由Consumer控制，所以Kafka broker是无状态的，它不需要标记哪些消息被哪些消费过，也不需要通过broker去保证同一个Consumer Group只有一个Consumer能消费某一条消息，因此也就不需要锁机制，这也为Kafka的高吞吐率提供了有力保障。
关于已经被消费的消息： 对于传统的message queue而言，一般会删除已经被消费的消息，而Kafka集群会保留所有的消息，无论其被消费与否。
当然，因为磁盘限制，不可能永久保留所有数据（实际上也没必要），因此Kafka提供两种策略删除旧数据。
一是基于时间
二是基于Partition文件大小。
🔔可以通过配置$KAFKA_HOME/config/server.properties，让Kafka删除一周前的数据，也可在Partition文件超过1GB时删除旧数据。
Producer消息路由 Producer发送消息到broker时，会根据Paritition机制选择将其存储到哪一个Partition。如果Partition机制设置合理，所有消息可以均匀分布到不同的Partition里，这样就实现了负载均衡。如果一个Topic对应一个文件，那这个文件所在的机器I/O将会成为这个Topic的性能瓶颈，而有了Partition后，不同的消息可以并行写入不同broker的不同Partition里，极大的提高了吞吐率。
🔔可以在$KAFKA_HOME/config/server.properties中通过配置项num.partitions来指定新建Topic的默认Partition数量，也可在创建Topic时通过参数指定，同时也可以在Topic创建之后通过Kafka提供的工具修改。</description>
    </item>
    
    <item>
      <title>JavaWeb-Servlet</title>
      <link>https://maoyanting.github.io/post/javaweb-servlet/</link>
      <pubDate>Fri, 15 Dec 2017 18:05:24 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/javaweb-servlet/</guid>
      <description>&lt;p&gt;这个只是学习笔记，我是个刚学半年编程的半吊子，里面的内容可能会出错，所以也不建议转载
我会尽力保证里面的正确性，如果有错请指出，万分感谢&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SSM &#43; dva 之前端踩的坑</title>
      <link>https://maoyanting.github.io/post/ssm-&#43;-dva-%E4%B9%8B%E5%89%8D%E7%AB%AF%E8%B8%A9%E7%9A%84%E5%9D%91/</link>
      <pubDate>Wed, 13 Dec 2017 18:02:50 +0000</pubDate>
      
      <guid>https://maoyanting.github.io/post/ssm-&#43;-dva-%E4%B9%8B%E5%89%8D%E7%AB%AF%E8%B8%A9%E7%9A%84%E5%9D%91/</guid>
      <description>技术栈 后端：SSM + Tomcat 前端：dva + roadhog + antd + React
提示：dva的坑很多，react的体系很大（学习成本很高）不过github上Q&amp;amp;A很多也比较全面 然后其实这个适合做后台页面，所以才封装得那么像java吧
前后端衔接部分： 网上找了很多都没有我能用的，我自己最后弄了个比较蠢的方法
首先往.roadhogrc里面添加
&amp;quot;publicPath&amp;quot;: &amp;quot;./&amp;quot;, &amp;quot;outputPath&amp;quot;: &amp;quot;你的webapp的路径&amp;quot;,12  publicPath 修改是为了保证到时候build出来的文件的静态目录不出错
其实这里很奇怪，为什么webpack自己本身不去弄好这个
前端的代码写好以后，直接npm build到webapp的目录下 这步操作先会让webapp里面所有的文件清空 我自己比较蠢的方法就是把web.xml文件复制出来，每次build后再复制进去
更新：后来觉得这样做实在是太傻逼兼太麻烦了 在.roadhog里面加上了这个代理
 &amp;quot;proxy&amp;quot;: { &amp;quot;/api&amp;quot;: { &amp;quot;target&amp;quot;: &amp;quot;http://localhost:8080/exampleone/&amp;quot;, &amp;quot;changeOrigin&amp;quot;: true, &amp;quot;headers&amp;quot;:{ &amp;quot;host&amp;quot;:&amp;quot;localhost:8080/exampleone/&amp;quot; }, &amp;quot;pathRewrite&amp;quot;: { &amp;quot;^/api&amp;quot; : &amp;quot;&amp;quot; } } },12345678910  这里面的内容可以参考：https://www.jianshu.com/p/3bdff821f859 service里面和后端的交互：
export async function login(data) { return request(&#39;/api/login&#39;, { /* 之前这里是/exampleone/login。我是build后使用这个方式*/ method: &#39;POST&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39; }, body: JSON.</description>
    </item>
    
  </channel>
</rss>